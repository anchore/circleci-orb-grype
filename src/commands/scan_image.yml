description: >
  Scan a Docker image with grype. The scan output goes in a file named after its image, e.g. for alpine:latest the file is `alpine-latest-vuln.json`

parameters:
  image_name:
    type: string
    description: Image name with tag (e.g. "alpine:latest").
  registry_name:
    type: string
    default: ""
    description: Name of private registry (e.g. docker.io).
  registry_user:
    type: string
    default: ""
    description: Username for private registry (use env var to populate).
  registry_pass:
    type: string
    default: ""
    description: Password for private registry (use env var to populate).
  registry_auth_token:
    type: string
    default: ""
    description: Auth token for private registry
  fail_on_severity:
    type: string
    default: ""
    description: set the return code to 1 if a vulnerability is found with a severity >= the given severity, options=[negligible low medium high critical]
  output_format:
    type: string
    default: json
    description: report output formatter, formats=[json table cyclonedx template]
  enable_debug_logs:
    type: boolean
    default: true # NOTE: grype gets stuck scanning an image without debug log flag
    description: enable debug logs
  grype_version:
    type: string
    default: v0.26.1
    description: version of grype used by this orb.

steps:
  - run:
      name: Analyze image with grype.
      environment:
        IMAGE_NAME: "<< parameters.image_name >>"
        GRYPE_REGISTRY_AUTH_AUTHORITY: "<< parameters.registry_name >>"
        GRYPE_REGISTRY_AUTH_USERNAME: "<< parameters.registry_user >>"
        GRYPE_REGISTRY_AUTH_PASSWORD: "<< parameters.registry_pass >>"
        GRYPE_REGISTRY_AUTH_TOKEN: "<< parameters.registry_auth_token >>"
        FAIL_ON: "<< parameters.fail_on_severity >>"
        OUTPUT_FORMAT: "<< parameters.output_format >>"
        ENABLE_DEBUG_LOGS: "<< parameters.enable_debug_logs >>"
        GRYPE_VERSION: "<< parameters.grype_version >>"
      command: ". src/scripts/scan_image.sh"
